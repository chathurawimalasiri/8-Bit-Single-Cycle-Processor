$date
	Fri Feb  4 12:51:19 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 32 ! PC [31:0] $end
$var wire 32 " INSTRUCTION [31:0] $end
$var reg 1 # CLK $end
$var reg 1 $ RESET $end
$scope module mycpu $end
$var wire 1 # CLK $end
$var wire 32 % INSTRUCTION [31:0] $end
$var wire 1 & OR_OUT $end
$var wire 1 $ RESET $end
$var wire 1 ' ZERO $end
$var wire 1 ( WRITE_ENABLE $end
$var wire 8 ) TWOS [7:0] $end
$var wire 1 * SUB_SELECT $end
$var wire 8 + SUB_RESULT [7:0] $end
$var wire 8 , REGOUT2 [7:0] $end
$var wire 8 - REGOUT1 [7:0] $end
$var wire 32 . NEXTPC2 [31:0] $end
$var wire 32 / NEXTPC [31:0] $end
$var wire 1 0 JUMP $end
$var wire 1 1 IMM_SELECT $end
$var wire 8 2 IMM_RESULT [7:0] $end
$var wire 1 3 BRANCH $end
$var wire 1 4 BNE $end
$var wire 1 5 AND_OUT2 $end
$var wire 1 6 AND_OUT $end
$var wire 8 7 ALU_OUT [7:0] $end
$var wire 3 8 ALUOP [2:0] $end
$var wire 32 9 ADDR_OUT [31:0] $end
$var reg 32 : PC [31:0] $end
$scope module a1 $end
$var wire 1 6 OUTPUT $end
$var wire 1 ' INPUT2 $end
$var wire 1 3 INPUT1 $end
$upscope $end
$scope module a2 $end
$var wire 1 ; INPUT2 $end
$var wire 1 5 OUTPUT $end
$var wire 1 4 INPUT1 $end
$upscope $end
$scope module adr $end
$var wire 32 < FOUR [31:0] $end
$var wire 32 = PC [31:0] $end
$var wire 32 > NEXTPC [31:0] $end
$upscope $end
$scope module alu $end
$var wire 1 ' ZERO $end
$var wire 3 ? SELECT [2:0] $end
$var wire 8 @ OR_OUT [7:0] $end
$var wire 8 A FORWARD_OUT [7:0] $end
$var wire 8 B DATA2 [7:0] $end
$var wire 8 C DATA1 [7:0] $end
$var wire 8 D AND_OUT [7:0] $end
$var wire 8 E ADD_OUT [7:0] $end
$var reg 8 F RESULT [7:0] $end
$scope module add1 $end
$var wire 8 G DATA2 [7:0] $end
$var wire 8 H DATA1 [7:0] $end
$var wire 8 I ADD_OUT [7:0] $end
$upscope $end
$scope module and1 $end
$var wire 8 J AND_OUT [7:0] $end
$var wire 8 K DATA2 [7:0] $end
$var wire 8 L DATA1 [7:0] $end
$upscope $end
$scope module fwd1 $end
$var wire 8 M FORWARD_OUT [7:0] $end
$var wire 8 N DATA2 [7:0] $end
$upscope $end
$scope module or1 $end
$var wire 8 O OR_OUT [7:0] $end
$var wire 8 P DATA2 [7:0] $end
$var wire 8 Q DATA1 [7:0] $end
$upscope $end
$upscope $end
$scope module for_sub $end
$var wire 8 R OUTPUT [7:0] $end
$var wire 8 S INPUT [7:0] $end
$upscope $end
$scope module immediate_or_reg $end
$var wire 8 T INPUT2 [7:0] $end
$var wire 1 1 SELECT $end
$var wire 8 U INPUT1 [7:0] $end
$var reg 8 V OUTPUT [7:0] $end
$upscope $end
$scope module jump_mux $end
$var wire 32 W INPUT1 [31:0] $end
$var wire 1 & SELECT $end
$var wire 32 X INPUT2 [31:0] $end
$var reg 32 Y OUTPUT [31:0] $end
$upscope $end
$scope module mucu $end
$var wire 8 Z OPCODE [7:0] $end
$var reg 3 [ ALUOP [2:0] $end
$var reg 1 4 BNE $end
$var reg 1 3 BRANCH $end
$var reg 1 0 JUMP $end
$var reg 1 1 MUXIMM $end
$var reg 1 * MUXSUB $end
$var reg 1 ( WRITEENABLE $end
$upscope $end
$scope module myregfile $end
$var wire 1 # CLK $end
$var wire 8 \ IN [7:0] $end
$var wire 3 ] INADDRESS [2:0] $end
$var wire 8 ^ OUT1 [7:0] $end
$var wire 3 _ OUT1ADDRESS [2:0] $end
$var wire 8 ` OUT2 [7:0] $end
$var wire 3 a OUT2ADDRESS [2:0] $end
$var wire 1 $ RESET $end
$var wire 1 ( WRITE $end
$upscope $end
$scope module na $end
$var wire 32 b CURRENT_ADDR [31:0] $end
$var wire 8 c OFFSET [7:0] $end
$var wire 32 d SHIFTED [31:0] $end
$var wire 32 e NEW_ADDR [31:0] $end
$var wire 32 f EXTENDED [31:0] $end
$upscope $end
$scope module select2s $end
$var wire 8 g INPUT1 [7:0] $end
$var wire 8 h INPUT2 [7:0] $end
$var wire 1 * SELECT $end
$var reg 8 i OUTPUT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
b100 <
x;
bx :
bx 9
bx 8
bx 7
x6
x5
x4
x3
bx 2
x1
x0
bx /
bx .
bx -
bx ,
bx +
x*
bx )
x(
x'
x&
bx %
1$
0#
bx "
bx !
$end
#4
b0 !
b0 :
b0 =
1#
#5
b100 /
b100 >
b100 W
b100 b
0$
#6
b10000 d
b0 Z
b100 ]
b0 _
b101 a
b101 T
b100 f
b100 c
b1000000000000000101 "
b1000000000000000101 %
#7
b100 .
b100 Y
0&
05
06
b101 2
b101 B
b101 G
b101 K
b101 N
b101 P
b101 V
04
00
03
1(
0*
b0 8
b0 ?
b0 [
11
#8
1;
0'
b101 7
b101 F
b101 \
b0 +
b0 U
b0 i
bx1x1 @
bx1x1 O
b0x0x D
b0x0x J
b101 A
b101 M
b10100 9
b10100 X
b10100 e
b0 -
b0 C
b0 H
b0 L
b0 Q
b0 ^
b0 ,
b0 S
b0 `
b0 g
0#
#9
b101 @
b101 O
b0 D
b0 J
b0 )
b0 R
b0 h
#10
b101 E
b101 I
#12
1#
#13
b100 !
b100 :
b100 =
#14
b1000 .
b1000 Y
b1000 /
b1000 >
b1000 W
b1000 b
#15
b101 ]
b10100 d
b101 f
b101 c
b1010000000000000101 "
b1010000000000000101 %
#16
0#
#17
b11100 9
b11100 X
b11100 e
#20
1#
#21
b1000 !
b1000 :
b1000 =
#22
b1100 .
b1100 Y
b1100 /
b1100 >
b1100 W
b1100 b
#23
b11 2
b11 B
b11 G
b11 K
b11 N
b11 P
b11 V
b101 +
b101 U
b101 i
b110 ]
b11 a
b11 T
b11000 d
b110 f
b110 c
b101 ,
b101 S
b101 `
b101 g
b1100000000000000011 "
b1100000000000000011 %
#24
b11 7
b11 F
b11 \
b11 @
b11 O
b11 A
b11 M
b11111011 )
b11111011 R
b11111011 h
0#
#25
b0 +
b0 U
b0 i
b11 E
b11 I
b0 ,
b0 S
b0 `
b0 g
b100100 9
b100100 X
b100100 e
#26
b0 )
b0 R
b0 h
#28
1#
#29
b1100 !
b1100 :
b1100 =
#30
b10000 .
b10000 Y
b10000 /
b10000 >
b10000 W
b10000 b
#31
b1001 2
b1001 B
b1001 G
b1001 K
b1001 N
b1001 P
b1001 V
b10 ]
b1 a
b1001 T
b1000 d
b10 f
b10 c
b100000000000001001 "
b100000000000001001 %
#32
b1001 7
b1001 F
b1001 \
b1001 @
b1001 O
b1001 A
b1001 M
0#
#33
b1001 E
b1001 I
b11000 9
b11000 X
b11000 e
#36
1#
#37
b10000 !
b10000 :
b10000 =
#38
b10100 .
b10100 Y
b10100 /
b10100 >
b10100 W
b10100 b
#39
b10 2
b10 B
b10 G
b10 K
b10 N
b10 P
b10 V
b10 Z
b110 ]
b100 _
b10 a
b10 T
b11000 d
b110 f
b110 c
b10000001100000010000000010 "
b10000001100000010000000010 %
#40
b0 2
b0 B
b0 G
b0 K
b0 N
b0 P
b0 V
b10 @
b10 O
b1 8
b1 ?
b1 [
01
b10 A
b10 M
0#
#41
b1001 2
b1001 B
b1001 G
b1001 K
b1001 N
b1001 P
b1001 V
b1001 +
b1001 U
b1001 i
b0 @
b0 O
b0 A
b0 M
b101 -
b101 C
b101 H
b101 L
b101 Q
b101 ^
b1001 ,
b1001 S
b1001 `
b1001 g
b101100 9
b101100 X
b101100 e
#42
b1 D
b1 J
b1001 A
b1001 M
b1101 @
b1101 O
b11110111 )
b11110111 R
b11110111 h
#43
b1110 7
b1110 F
b1110 \
b1110 E
b1110 I
#44
1#
#45
b10100 !
b10100 :
b10100 =
#46
b11000 .
b11000 Y
b11000 /
b11000 >
b11000 W
b11000 b
#47
b1 Z
b0 ]
b0 _
b110 a
b110 T
b0 d
b0 f
b0 c
b1000000000000000000000110 "
b1000000000000000000000110 %
#48
b1001 7
b1001 F
b1001 \
b0 8
b0 ?
b0 [
0#
#49
b1110 2
b1110 B
b1110 G
b1110 K
b1110 N
b1110 P
b1110 V
b1110 +
b1110 U
b1110 i
b0 -
b0 C
b0 H
b0 L
b0 Q
b0 ^
b1110 ,
b1110 S
b1110 `
b1110 g
b11000 9
b11000 X
b11000 e
#50
b1110 7
b1110 F
b1110 \
b1110 A
b1110 M
b1110 @
b1110 O
b0 D
b0 J
b11110010 )
b11110010 R
b11110010 h
#52
1#
#53
b11000 !
b11000 :
b11000 =
#54
b11100 .
b11100 Y
b11100 /
b11100 >
b11100 W
b11100 b
#55
b10000 Z
b10 ]
b100 _
b1000 d
b10 f
b10 c
b1110 -
b1110 C
b1110 H
b1110 L
b1110 Q
b1110 ^
b10000000000100000010000000110 "
b10000000000100000010000000110 %
#56
b11000 .
b11000 Y
1&
b11110010 2
b11110010 B
b11110010 G
b11110010 K
b11110010 N
b11110010 P
b11110010 V
15
b11110010 +
b11110010 U
b11110010 i
14
0(
1*
b1 8
b1 ?
b1 [
b1110 D
b1110 J
0#
#57
b100100 .
b100100 Y
b11111110 @
b11111110 O
b10 D
b10 J
b11110010 A
b11110010 M
b101 -
b101 C
b101 H
b101 L
b101 Q
b101 ^
b100100 9
b100100 X
b100100 e
#58
b11110111 @
b11110111 O
b0 D
b0 J
#59
b11110111 7
b11110111 F
b11110111 \
b11110111 E
b11110111 I
#60
1#
#61
b100100 !
b100100 :
b100100 =
#62
b101000 /
b101000 >
b101000 W
b101000 b
#63
b10 Z
b11 ]
b1 _
b1 a
b1 T
b1100 d
b11 f
b11 c
b10000000110000000100000001 "
b10000000110000000100000001 %
#64
b101000 .
b101000 Y
0&
b1110 2
b1110 B
b1110 G
b1110 K
b1110 N
b1110 P
b1110 V
05
b1110 +
b1110 U
b1110 i
04
1(
0*
0#
#65
b0 2
b0 B
b0 G
b0 K
b0 N
b0 P
b0 V
b0 +
b0 U
b0 i
b1111 @
b1111 O
b100 D
b100 J
b1110 A
b1110 M
b0 -
b0 C
b0 H
b0 L
b0 Q
b0 ^
b0 ,
b0 S
b0 `
b0 g
b110100 9
b110100 X
b110100 e
#66
b0 A
b0 M
b0 @
b0 O
b0 D
b0 J
b0 )
b0 R
b0 h
#67
0;
1'
b0 7
b0 F
b0 \
b0 E
b0 I
#68
1#
#69
b101000 !
b101000 :
b101000 =
#70
b101100 .
b101100 Y
b101100 /
b101100 >
b101100 W
b101100 b
#71
bx Z
bx ]
bx _
bx a
bx T
bx d
bx f
bx c
bx "
bx %
#72
x&
x6
x4
x0
x3
0(
x*
bx 8
bx ?
bx [
x1
0#
1$
#73
bx -
bx C
bx H
bx L
bx Q
bx ^
bx ,
bx S
bx `
bx g
bx 9
bx X
bx e
#74
bx @
bx O
bx )
bx R
bx h
0$
#75
bx E
bx I
#76
1#
#77
b101100 !
b101100 :
b101100 =
#78
b110000 /
b110000 >
b110000 W
b110000 b
#80
0#
#84
1#
#88
0#
#92
1#
#96
0#
#100
1#
#104
0#
#108
1#
#112
0#
#116
1#
#120
0#
#124
1#
#128
0#
#132
1#
#136
0#
#140
1#
#144
0#
#148
1#
#152
0#
#156
1#
#160
0#
#164
1#
#168
0#
#172
1#
#176
0#
#180
1#
#184
0#
#188
1#
#192
0#
#196
1#
#200
0#
#204
1#
#208
0#
#212
1#
#216
0#
#220
1#
#224
0#
#228
1#
#232
0#
#236
1#
#240
0#
#244
1#
#248
0#
#252
1#
#256
0#
#260
1#
#264
0#
#268
1#
#272
0#
#276
1#
#280
0#
#284
1#
#288
0#
#292
1#
#296
0#
#300
1#
#304
0#
#308
1#
#312
0#
#316
1#
#320
0#
#324
1#
#328
0#
#332
1#
#336
0#
#340
1#
#344
0#
#348
1#
#352
0#
#356
1#
#360
0#
#364
1#
#368
0#
#372
1#
#376
0#
#380
1#
#384
0#
#388
1#
#392
0#
#396
1#
#400
0#
#404
1#
#408
0#
#412
1#
#416
0#
#420
1#
#424
0#
#428
1#
#432
0#
#436
1#
#440
0#
#444
1#
#448
0#
#452
1#
#456
0#
#460
1#
#464
0#
#468
1#
#472
0#
#476
1#
#480
0#
#484
1#
#488
0#
#492
1#
#496
0#
#500
1#
#504
0#
#508
1#
#512
0#
#516
1#
#520
0#
#524
1#
#528
0#
#532
1#
#536
0#
#540
1#
#544
0#
#548
1#
#552
0#
#556
1#
#560
0#
#564
1#
#568
0#
#572
1#
#574
